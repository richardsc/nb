#!/usr/bin/python
from __future__ import print_function
from nbclass import Nb
import argparse
import sys
import json
import os
import re
import textwrap
import datetime
from random import randint, seed
from time import strptime
import subprocess

hints = [
        'to add a note, type "nb -a" (which opens an editor)', 
        'to see all notes, type "nb"',
        'to read notes from a JSON file, type "nb -a -m json < notes.json"',
        'to store notes into a JSON file, type "nb -m json > notes.json"',
        'to see all notes in markdown format, type "nb -m markdown"',
        'to see all notes in json format, type "nb -m json"',
        'to edit e.g. note with hash \'ab...\', type "nb -e ab" (which opens an editor)',
        'to delete e.g. note wth hash \'ab...\', type "nb -d ab"',
        'to see notes with keyword \'foo\', type "nb -k foo"',
        'to show e.g. note with hash \'ab...\', type "nb ab"',
        'notes are ordered by time of entry']

def shorten_hash(hash):
    n = len(hash)
    for nc in range(1, 20): # cannot imagine getting longer than 6, really
        h = hash[:]
        for i in range(n):
            h[i] = h[i][0:nc]
        hs = sorted(h)
        duplicate = False
        for i in range(n-1):
            if hs[i] == hs[i+1]:
                duplicate = True
                break
        if not duplicate:
            h = hash[:]
            for i in range(n):
                h[i] = h[i][0:nc]
            return(h)
    return(hash)

def random_hint():
   return hints[randint(0, len(hints)-1)]

def get_from_dotfile(file, token, default=""):
    try:
        with open(os.path.expanduser(file), "r") as f:
            for line in f.readlines():
                line = re.sub(r'#.*', r'', line)
                tokens = line.split("=")
                if 2 == len(tokens):
                    tokens = line.split("=")
                    tokens[0] = tokens[0].strip()
                    tokens[1] = tokens[1].strip()
                    tokens[1] = tokens[1].strip('"')
                    if tokens[0] == token:
                        if tokens[1] == "True":
                            return True
                        elif tokens[1] == "False":
                            return False
                        else:
                            return(tokens[1])
            return(default)
    except:
        print("cannot open file '%s'" % file, file=sys.stderr)
        exit(1)


# If second arg is a number, it is a noteId
id_desired = None
if len(sys.argv) > 1:
    try:
        id_desired = sys.argv[1]
        #del sys.argv[1]
    except:
        pass

showID = get_from_dotfile("~/.nbrc", "showID", False)
debug = get_from_dotfile("~/.nbrc", "debug", None)

parser = argparse.ArgumentParser(prog="nb", description="Nota Bene: an organizer for textual notes",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
There are several ways to use nb.  Try 'nb -h' for some hints.  The most common uses are

    nb         # list notes, with first column being hash code
    nb -k key  # list notes with indicated keyword
    nb ab      # list notes with hash starting 'ab' (in detail, if only one note)
    nb -a      # add a note (opens a text editor)
    nb -e ab   # edit note with hash starting with 'ab' (opens a text editor)
    nb -d ab   # delete note with hash starting with 'ab'

The ~/.nbrc file may be used for customization, and may contain e.g. the
following:

    db = \"~/Dropbox/nb.db\"
    pretty = \"oneline\"
    showID = False      # set True to see database ID numbers in listings
    debug = False       # set True (or use --debug flag) to turn on debugging'''))
parser.add_argument("hash", nargs="?", default="", help="abbreviated hash to search for", metavar="hash")
parser.add_argument('-a', "--add", action="store_true", dest="add", default=False, help="add a note")
parser.add_argument('-e', "--edit", type=str, default=None, help="edit note with abbreviated hash 'h'", metavar="h")
parser.add_argument('-d', "--delete", type=str, default=None, help="delete note abbreviated hash 'h'", metavar="h")
parser.add_argument('-i', '--id', type=int, help="ID number of note to work with (MAY BE REMOVED)")
parser.add_argument('-H', '--Hints', action="store_true", dest="hints", default=False, help="get hints")
parser.add_argument('-m', '--mode', type=str, default="interactive", choices=['interactive', 'plain', 'json', 'markdown'],
        metavar="m", help="i/o mode: 'interactive', 'plain', 'json' or 'markdown'")
parser.add_argument('-t', "--title", type=str, default="", help="a short title", metavar="t")
parser.add_argument("-k", "--keywords", type=str, default="", help="string containing comma-separated keywords", metavar="k")
parser.add_argument('-c', "--content", type=str, default="", help="string to be used for content", metavar="c")
parser.add_argument("--count", action="store_true", dest="count", default=False, help="report only count of found results")
parser.add_argument("--debug", action="store_true", dest="debug", default=False, help="set debugging on")
parser.add_argument("--privacy", type=int, default=0, help="set privacy level (0=open, 1=closed)", metavar="level")
parser.add_argument("--file", type=str, help="filename for i/o", metavar="name")
# Process the dotfile (need for next parser call)
defaultDatabase = get_from_dotfile("~/.nbrc", "db", "~/Dropbox/nb.db")
# Back to the parser
parser.add_argument("--db", type=str, default=defaultDatabase, help="filename for database")
parser.add_argument("--strict", action="store_true", default=False, help="use strict search?")
parser.add_argument("--due", type=str, default="", help="time when item is due [not used yet]", metavar="when")
parser.add_argument('-p', "--pretty", type=str, default="", metavar="fmt", help="format for note output")
parser.add_argument('-v', "--version", action="store_true", dest="version", default=False, help="get version number")
parser.add_argument("--developer", action="store_true", default=False, help="flag for the developer *only*")
args = parser.parse_args()

args.keywordsoriginal = args.keywords
args.keywords = args.keywords.split(',')

#showID = get_from_dotfile("~/.nbrc", "showID", False)
#debug = get_from_dotfile("~/.nbrc", "debug", None)
            
if not args.debug:
    args.debug = debug

nb = Nb(debug=args.debug, db=args.db, quiet=args.count)

if args.version:
    print(nb.version())
    sys.exit(0)

if args.hints:
    for hint in hints:
        print(hint)
    sys.exit(0)

# look in ~/.nbrc to see if a database is named there
if not args.pretty:
    args.pretty = get_from_dotfile("~/.nbrc", "pretty", "all")

if args.developer:
    nb.warning("--developer does nothing at the present time")

if args.file:
    file = args.file
else:
    file = "stdout"

if args.title:
    title = args.title
else:
    title = ""
if args.content:
    content = args.content
else:
    content = ""

if args.delete:
    if args.debug:
        print("should now delete note %d" % args.delete, end="\n")
    nb.delete(args.delete)
    sys.exit(0)

if args.edit:
    if args.debug:
        print("should now edit note %d" % args.edit, end="\n")
    idnew = nb.edit(args.edit)
    sys.exit(0)

if args.add:
    if args.mode == 'json':
        if not args.file:
            nb.error("Must use --file to name an input file")
        for line in open(args.file, "r"):
            line = line.rstrip()
            if args.debug:
                print(line, '\n')
            if (len(line)) > 1:
                try:
                    j = json.loads(line)
                    if args.debug:
                        print(j)
                except:
                    nb.error("JSON file is not in proper format on line: %s" % line)
                if 'title' not in j:
                    sys.exit(1)
                if 'content' not in j:
                    j['content'] = ""
                if 'keywords' in j:
                    keyword = j['keywords'].split(',')
                else:
                    keyword = ''
                if 'privacy' not in j:
                    j['privacy'] = 0
                j['keywords'].split(',')
                id = nb.add(title=j['title'], keywords=keyword, content=j['content'], privacy=j['privacy'])
        sys.exit(0)
    elif args.mode== 'plain' and (args.title == "" and args.content == ""):
        lines = sys.stdin.readlines()
        if nb.debug:
            print('reading from stdin')
        # trim newlines, plus any blank lines at start and end [FIXME: inelegant in the extreme]
        trim = 0
        nlines = len(lines)
        for l in range(nlines):
            if len(lines[l].strip()) < 1:
                trim += 1
            else:
                break
        lines = [lines[i].rstrip('\n') for i in range(trim, nlines)]
        trim = 0
        nlines = len(lines)
        for l in reversed(list(range(nlines))):
            if len(lines[l].strip()) < 1:
                trim += 1
            else:
                break
        lines = [lines[i].rstrip('\n') for i in range(0, nlines-trim)]
        # finally (after all that bad code!) we can parse for content
        title = ""
        content = ""
        keywords = []
        for line in lines:
            if nb.debug:
                print("analysing line \"%s\"" % line)
            if title == "":
                if line == "":
                    next # FIXME: should this be 'continue'?
                title = line.strip()
            elif '<' in line:
                keywords = re.sub(r'<.*>', '', line).strip()
                keywords = re.sub(r' *\] *\[ *', ',', keywords).strip()
                keywords = re.sub(r' *\[ *', '', keywords).strip()
                keywords = re.sub(r' *\] *', '', keywords).strip()
                keywords = keywords.split(',')
            else:
                if content == "" and line == "":
                    next # FIXME: should this be 'continue'?
                content = content.lstrip() + line + '\n'
        if nb.debug:
            print("title:", title)
            print("keywords:", keywords)
            print("content: (%s)" % content)
        id = nb.add(title=title, keywords=keywords, content=content, privacy=args.privacy)
    elif args.mode == 'interactive' and (args.title == "" or args.content == "" or args.keywords == ""):
        if args.debug:
            print("should handle interactive now")
        # append repo name ... FIXME: should be a flag controlling whether to do this
        #git_repo = nb.find_git_repo()
        #if git_repo:
        #    if len(args.keywords) > 0 and args.keywords[0] != "":
        #        args.keywords.insert(0, git_repo.strip())
        #    else:
        #        args.keywords = [git_repo]
        ee = nb.editor_entry(title=args.title, keywords=args.keywords, content=args.content, privacy=args.privacy, due=args.due)
        id = nb.add(title=ee["title"], keywords=ee["keywords"], content=ee["content"], privacy=ee["privacy"], due=ee["due"])
    else:
        id = nb.add(title=args.title, keywords=args.keywords, content=args.content, privacy=args.privacy, due=args.due)
    sys.exit(0)

#elif args.edit:
#    if args.keywords[0] != "":
#        if args.debug:
#            print("KEYWORD \"%s\"" % args.keywordsoriginal)
#        try:
#            k = args.keywordsoriginal.split('=')
#        except:
#            nb.error("must specify e.g. 'nb edit --keyword OLD=NEW'")
#        if args.debug:
#            nb.fyi("renaming '%s' to '%s'" % (k[0], k[1]))
#        nb.rename_keyword(k[0], k[1])
#    else:
#        if not id_desired:
#            nb.error("must provide an ID, e.g. 'nb 1 -e' to edit note with ID=1")
#        idnew = nb.edit(id_desired)
#    sys.exit(0)


# elif args.delete:
#     if not id_desired:
#         nb.error("must give a note ID number (shown in <> by 'nb find')")
#         sys.exit(1)
#     if args.debug:
#         nb.fyi("note with id number", id_desired, "should be deleted now")
#     nb.delete(id_desired)
#     sys.exit(0)


#elif args.developer:
#    print("--developer does nothing at the present time")
#    #repo = nb.find_git_repo()
#    #if repo:
#    #    print("DEVELOPER: in a git repo named: '%s'; maybe we should auto-tag with this?" % repo)
#    sys.exit(0)

else: # By a process of elimination, we must be trying to find notes.
    #print("hash %s" % args.hash)
    due_requested = nb.interpret_time(args.due)
    if id_desired is not None:
        if id_desired[0:1] == '-': # don't get confused by arg flags
            id_desired = None
    if id_desired is not None:
        if id_desired <= 0:
            ids = nb.get_id_list()
            nids = len(ids)
            if (id_desired + nids - 1) < 0:
                print("list only contains %d notes" % nids, end="\n")
                sys.exit(1)
            #print(ids)
            #print(nids)
            id = ids[nids + id_desired - 1][0]
            #print("id:", id)
            found = nb.find(id=int(id), mode=args.mode, strict=args.strict)
        else:
            found = nb.find(id=id_desired, mode=args.mode, strict=args.strict)
    elif args.keywords[0] != '':
        found = nb.find(keywords=args.keywords, mode=args.mode, strict=args.strict)
    elif args.id:
        print("FIXME: args.id case ... borken, I think (id=%s)" % args.id)
        found = nb.find(id=args.id, mode=args.mode, strict=args.strict)
    else:
        found = nb.find(keywords='?'.split(','), mode=args.mode, strict=args.strict)
    count = 0
    nfound = len(found)
    i = -1
    # Single hashes are printed to 7 chars (like on github), but multiple ones are shortened.
    hash = []
    for f in found:
        hash.append(f["hash"])
    if len(hash) > 1:
        hash = shorten_hash(hash)
    else:
        hash[0] = hash[0][0:7]
    for f in found:
        i = i + 1
        #print(f)
        try:
            due = f['due']
        except:
            due = None
        #print("len(due): %d" % len(due))
        if due_requested[0]:
            if not due:
                continue
            if args.debug:
                print("due_requested: %s" % due_requested[0])
            due = datetime.datetime.strptime(due, '%Y-%m-%d %H:%M:%S.%f')
            if args.debug:
                print("due value stored in note:", due)
            if due > due_requested[0]:
                when = (due - due_requested[0]).total_seconds()
            else:
                when = (due_requested[0]- due).total_seconds()
            if args.debug:
                print('when:', when)
            if when < 0:
                continue
        count += 1
        if args.count:
            continue
        elif args.mode == "json":
            print(f['json'])
        elif args.mode== 'markdown':
            print("**%s**\n" %f ['title'])
            print("<%s> " %f ['noteId'], end='')
            for k in f['keywords']:
                print("[%s] " % k, end='')
            print("{%s / %s}\n" % (f['date'], f['modified']))
            print(f['content'].lstrip())
        else:
            if args.pretty == "oneline" and nfound > 1:
                print("#%s " % hash[i], end="")
                if showID:
                    print("(%s) " % f['noteId'], end="")
                print("%s " % f['title'], end="")
                print("[", ", ".join(f['keywords'][i] for i in range(len(f['keywords']))), "]",end='\n')
            else:
                print("#%s " % hash[i], end="")
                if showID:
                    print("(%s) " % f['noteId'], end="")
                print("%s" % f['title'], end="")
                print("", "[", ", ".join(f['keywords'][i] for i in range(len(f['keywords']))), "]",end='\n')
                #this commented-out block shows how to e.g. show just hour of day.
                #created = f['date']
                #dan = datetime.datetime.strptime(created, "%Y-%m-%d %H:%M:%S")
                #print(datetime.datetime.strftime(dan, "%Y-%m-%d %Hh"))
                print("  created %s" % f['date'], end=" ")
                if f['due'] and len(f['due']) > 0:
                    due = datetime.datetime.strptime(f['due'], '%Y-%m-%d %H:%M:%S.%f') # FIXME: make this 'due' DRY (+-20 lines)
                    now = datetime.datetime.now()
                    when = abs(due - now).total_seconds()
                    if due > now:
                        if when < 2 * 3600:
                            print("(due in %d minutes)" % round(when / 60))
                        elif when < 86400:
                            print("(due in %d hours)" % round(when / 3600))
                        else:
                            print("(due in %d days)" % round(when / 3600 / 24))
                    else:
                        if when < 2 * 3600:
                            print("(overdue by %d minutes)" % (when / 60))
                        elif when < 86400:
                            print("(overdue by %d hours)" % (when / 3600))
                        else:
                            print("(overdue by %.1f days)" % (when / 3600 / 24))
                else:
                    print('')
                content = f['content'].replace('\\n', '\n')
                if not args.pretty == "twoline":
                    for contentLine in content.split('\n'):
                        c = contentLine.rstrip('\n')
                        if len(c):
                            print(" ", contentLine.rstrip('\n'))
                    print('')
    if args.count:
        print(count)
    if args.mode != "json":
        print("\nHINT:", end=" ")
        print(random_hint())

