#!/usr/bin/python

'''
There are several ways to use nb.

./na add --title "oceanpython lecture" --keyword "lecture,python" --content "Diego gave a great talk"
./na add                             # interact with user to get the note information
./na add --format json < notes.json  # infer notes from a JSON file (ignore any other arguments)
./na find                            # show all notes
./na find --keyword "lecture"        # show notes with keyword 'lecture'
'''

from nbclass import Nb
import argparse
import sys
import json
import os

# look in ~/.nbrc to see if a database is named there
defaultDatabase = "~/Dropbox/nb.py"
try:
    with open(os.path.expanduser("~/.nbrc"), "r") as f:
        tokens = f.readline().split("=")
        tokens[0] = tokens[0].strip()
        tokens[1] = tokens[1].strip()
        tokens[1] = tokens[1].strip('"')
        if tokens[0] == "db":
            defaultDatabase = tokens[1] # over-ride
except:
    pass

parser = argparse.ArgumentParser()
parser.add_argument('action', choices=['add', 'find', 'delete', 'version', 'RESET', 'cleanup'])
parser.add_argument('--id', type=int, help="ID number of note to delete")
parser.add_argument('--format', type=str, choices=['plain', 'json'], help="file containing JSON-formatted 'title', 'content' and 'keyword'")
parser.add_argument("--title", type=str, default="", help="title (short)")
parser.add_argument("--keywords", type=str, default="", help="comma-separated keywords")
parser.add_argument("--content", type=str, default="", help="content (long; markdown format)")
parser.add_argument("--debug", action="store_true", dest="debug", default=False, help="set debugging on")
parser.add_argument("--privacy", type=int, default=0, help="set privacy level (0=open, 1=closed)")
parser.add_argument("--file", type=str, help="filename for input (add) or output (find)")
parser.add_argument("--db", type=str, default=defaultDatabase, help="filename for database")
args = parser.parse_args()

args.keywords = args.keywords.split(',')

nb = Nb(debug=args.debug, db=args.db)

if args.file:
    file = args.file
else:
    file = "stdout"

if args.title:
    if args.action != "add":
        print "warning: --title is ignored unless --action!='add'"
    title = args.title
else:
    title = ""
if args.content:
    if args.action != "add":
        print "warning: --content is ignored unless --action='add'"
    content = args.content
else:
    content = ""

if args.format:
    format = args.format
else:
    format = 'plain'

if args.action == "add":
    if format == 'json':
        if not args.file:
            print "Must use --file to name an input file"
            sys.exit(1)
        for line in open(args.file, "r"):
            line = line.rstrip()
            if args.debug:
                print line, '\n'
            if (len(line)) > 1:
                try:
                    j = json.loads(line)
                    if args.debug:
                        print j
                except:
                    print "JSON file is not in proper format on line: %s" % line
                    sys.exit(1)
                if 'title' not in j:
                    sys.exit(1)
                if 'content' not in j:
                    j['content'] = ""
                if 'keywords' in j:
                    keyword = j['keywords'].split(',')
                else:
                    keyword = ''
                if 'privacy' not in j:
                    j['privacy'] = 0
                j['keywords'].split(',')
                id = nb.add(title=j['title'], keywords=keyword, content=j['content'], privacy=j['privacy'])
        sys.exit(0)
    if args.title == "" and args.content == "":
        keyword_list = nb.con.execute("SELECT keywordId, keyword FROM keyword;")
        msg = "Keywords (e.g. one of following) "
        for key in keyword_list:
            msg = msg + key[1] + ","
        msg = msg + "... : "
        keywords = raw_input(msg).split(',')
        title = raw_input("Title: ")
        privacy = raw_input("Privacy (numeric): ")
        privacy = int(privacy)
        print "Content: (blank line to end)"
        content = ""
        while True:
            c = raw_input("> ")
            if len(c) == 0:
                break
            else:
                content = content + c + '\n'
        content.rstrip('\n')
        id = nb.add(title=title, keywords=keywords, content=content, privacy=privacy)
    else:
        id = nb.add(title=args.title, keywords=args.keywords, content=args.content, privacy=args.privacy)

if args.action == "find":
    if args.keywords[0] != '':
        found = nb.find(keywords=args.keywords, format=format)
    else:
        found = nb.find(keywords='?'.split(','), format=format)
    for f in found:
        if format == "json":
            print f['json']
        else:
            #print "%s   <%s>" % (f['title'], f['noteId']),
            print "%s\n   <%s>" % (f['title'], f['noteId']),
            print "[", " ] [ ".join(f['keywords'][i] for i in range(len(f['keywords']))), "]"
            content = f['content'].replace('\\n', '\n')
            for contentLine in content.split('\n'):
                print "  ", contentLine.rstrip('\n')
            print ''
 

if args.action == "delete":
    if not args.id:
        print "must give a note ID number (in <>) in the 'nb find' view"
        sys.exit(1)
    if args.debug:
        print "note with id number", args.id, "should be deleted now"
    nb.delete(args.id)


if args.action == "RESET":
    nb.initialize(author="me")

if args.action == "cleanup":
    nb.cleanup()

if args.action == "version":
    nb.version()

