#!/usr/bin/python

'''
./na add --title "oceanpython lecture" --keyword "lecture,python" --content "Diego gave a great talk"
./na find --keyword "lecture"
./na find # shows all
./na add  # prompts for info
'''

from naclass import Na
import argparse
import sys
import json

parser = argparse.ArgumentParser()
parser.add_argument('action', choices=['add', 'find', 'reset'])
parser.add_argument('--json', type=str, help="file containing JSON-formatted 'title', 'content' and 'keyword'")
parser.add_argument("--title", type=str, default="", help="title (short)")
parser.add_argument("--keywords", type=str, default="", help="comma-separated keywords")
parser.add_argument("--content", type=str, default="", help="content (long; markdown format)")
parser.add_argument("--debug", action="store_true", dest="debug", default=False, help="set debugging on")
parser.add_argument("--privacy", type=int, default=0, help="set privacy level (0=open, 1=closed)")
args = parser.parse_args()

args.keywords = args.keywords.split(',')

na = Na(debug=args.debug)

if args.json:
    for line in open(args.json, "r"):
        line = line.rstrip()
        if (len(line)) > 1:
            try:
                j = json.loads(line)
            except:
                print "JSON file is not in proper format on line: %s" % line
                sys.exit(1)
            if 'title' not in j:
                sys.exit(1)
            if 'content' not in j:
                j['content'] = ""
            if 'keywords' in j:
                keyword = j['keywords'].split(',')
            else:
                keyword = ''
            if 'privacy' not in j:
                j['privacy'] = 0
            j['keywords'].split(',')
            id = na.add(title=j['title'], keywords=keyword, content=j['content'], privacy=j['privacy'])
    sys.exit(0)

if args.title:
    if args.action != "add":
        print "warning: --title is ignored unless --action!='add'"
    title = args.title
else:
    title = ""
if args.content:
    if args.action != "add":
        print "warning: --content is ignored unless --action='add'"
    content = args.content
else:
    content = ""

if args.action == "add":
    if args.title == "" and args.content == "":
        keyword_list = na.con.execute("SELECT keywordId, keyword FROM keyword;")
        msg = "Keywords (e.g. one of following) "
        for key in keyword_list:
            msg = msg + key[1] + ","
        msg = msg + "... : "
        keywords = raw_input(msg).split(',')
        title = raw_input("Title: ")
        privacy = raw_input("Privacy (numeric): ")
        privacy = int(privacy)
        print "Content: (blank line to end)"
        content = ""
        while True:
            c = raw_input("> ")
            if len(c) == 0:
                break
            else:
                content = content + c + '\n'
        content.rstrip('\n')
        id = na.add(title=title, keywords=keywords, content=content, privacy=privacy)
    else:
        id = na.add(title=args.title, keywords=args.keywords, content=args.content, privacy=args.privacy)

if args.action == "find":
    if args.keywords[0] != '':
        na.find(keywords=args.keywords)
    else:
        na.find(keywords='?'.split(','))

if args.action == "reset":
    na.initialize(author="me")



